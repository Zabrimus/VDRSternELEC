name: Build VDRSternELEC

on:
  workflow_dispatch:
    inputs:
      target:
        description: "build"
        default: CoreELEC-20-ng
        required: true
        type: choice
        options:
          - all
          - CoreELEC (all)
          - LibreELEC (all)
          - CoreELEC-19
          - CoreELEC-20-ng
          - CoreELEC-20-ne
          - CoreELEC-21-ng
          - CoreELEC-21-ne
          - LibreELEC-master-arm-AMLGX
          - LibreELEC-master-x86_64-x11
          - LibreELEC-master-arm-Allwinner-H6
          - LibreELEC-master-arm-Allwinner-A64
          - LibreELEC-master-arm-Allwinner-R40
          - LibreELEC-master-arm-Allwinner-H3
          - LibreELEC-master-arm-Allwinner-H5
          - LibreELEC-master-arm-Rockchip-RK3399
          - LibreELEC-master-arm-Rockchip-RK3288
          - LibreELEC-master-arm-Rockchip-RK3328
          - LibreELEC-master-arm-RPi-RPi4

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      CURRENT_RELEASE_TAG: ${{ steps.create_release_tag.outputs.CURRENT_RELEASE_TAG }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Prepare
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH="main"
          
          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )
          
          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          for cacheKey in $cacheKeysForPR
          do
              echo "Delete cache entry $cacheKey in repo $REPO and branch $BRANCH" 
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: oprypin/find-latest-tag@v1
        with:
          repository:  ${{ github.repository }}
          releases-only: false
        id: current_release_tag

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: create release tag file
        id: create_release_tag
        run: |
          CURRENT_TAG=${{ steps.current_release_tag.outputs.tag }}
          
          if [[ ! ${CURRENT_TAG} =~ ^${{ steps.date.outputs.date }} ]]; then
            TAG="${{ steps.date.outputs.date }}.1"
          else
            if [[ "${CURRENT_TAG}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\.[0-9]+$ ]]; then
              TAG=$(echo "${CURRENT_TAG}" | perl -pe 's/(\d+)(?!.*\d+)/$1+1/e')
            else
              TAG="${{ steps.date.outputs.date }}.1"
            fi
          fi

          echo "CURRENT_RELEASE_TAG=${TAG}" >> "$GITHUB_OUTPUT"
          echo "CURRENT_RELASE_TAG = ${TAG}"

  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
        matrix: ${{ steps.setmatrix.outputs.matrix }}
    steps:
      - name: Set Dynamic Matrix
        id: setmatrix
        run: |
          JSON="{\"include\":["
          
          for i in CoreELEC-19 CoreELEC-20-ng CoreELEC-20-ne CoreELEC-21-ng CoreELEC-21-ne \
                   LibreELEC-master-arm-AMLGX LibreELEC-master-x86_64-x11 LibreELEC-master-arm-Allwinner-H6 \
                   LibreELEC-master-arm-Allwinner-A64 LibreELEC-master-arm-Allwinner-R40 LibreELEC-master-arm-Allwinner-H3 \
                   LibreELEC-master-arm-Allwinner-H5 LibreELEC-master-arm-Rockchip-RK3399 LibreELEC-master-arm-Rockchip-RK3288 \
                   LibreELEC-master-arm-Rockchip-RK3328 LibreELEC-master-arm-RPi-RPi4
          do
            if ([ "${{ github.event.inputs.target }}" == "$i" ] || [ "${{ github.event.inputs.target }}" == 'all' ] || [ "${{ github.event.inputs.target }}" == '' ]) \
              || ([ "${{ github.event.inputs.target }}" == 'CoreELEC (all)' ] && [[ "$i" == CoreELEC* ]]) \
              || ([ "${{ github.event.inputs.target }}" == 'LibreELEC (all)' ] && [[ "$i" == LibreELEC* ]]) 
            then
               JSON="${JSON} {\"run\":\"$i\"}," 
            fi
          done
          
          JSON="${JSON} ]}"
      
          echo "matrix=${JSON}" >> "$GITHUB_OUTPUT"

  build-all:
    needs: [ prepare, prepare-matrix ]
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    uses: ./.github/workflows/build-vdrsternelec.yml
    with:
      config: ${{ matrix.run }}
      releasetag: ${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}
    secrets: inherit

  create-release:
    needs: [ prepare, prepare-matrix, build-all ]
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: Zabrimus/maximize-build-space@master

      - name: Download summary
        uses: actions/download-artifact@v4
        with:
          path: build-summary
          pattern: build-summary-*
          merge-multiple: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-artifacts
          pattern: build-artifacts-*
          merge-multiple: true

      - name: Create release and upload files
        run: |
          if [ -d build-summary ]; then 
            ls -R build-summary
          fi
          
          if [ -d build-artifacts ]; then 
            ls -R build-artifacts
          fi

          # Funktioniert nicht. Kein Plan, woran das liegt. Ich muss die Revision anders bestimmen.          
          # CMD="git ls-remote https://github.com/${{ github.repository }} | head -1 | sed \"s/HEAD//\" | cut -c 1-7"
          # VREV=eval $CMD
          
          # Erstmal rausnehmen, wenn das obige nicht funktioniert, dann ist das auch nicht sinnvoll
          # echo "VDRSternELEC: [master@${VREV}](https://github.com/${{ github.repository }}/tree/${VREV})" >> release_notes
          # echo "" >> release_notes
          
          echo "----------------------------------------------------------------------------" >> release_notes
          
          echo "| Status  | Distro | Project | Device | Revision |" >> release_notes
          echo "| ------- | ------ | ------- | ------ | -------- |" >> release_notes         

          cat build-summary/build-summary* >> release_notes
          
          cat release_notes
          
          # create release
          # gh release create "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" -R ${{ github.repository }} -F release_notes
          
          # upload target files
          for i in $(ls build-artifacts/CoreELEC/target/VDR*); do          
              echo "Upload $i in release tag ${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}"
              # gh release upload "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" $i --clobber -R ${{ github.repository }}
          done
          
          for i in $(ls build-artifacts/LibreELEC.tv/target/VDR*); do          
             echo "Upload $i in release tag ${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}"
             # gh release upload "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" $i --clobber -R ${{ github.repository }}
          done          
          
