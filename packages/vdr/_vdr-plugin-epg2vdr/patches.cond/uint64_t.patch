diff -ru8bBw a/lib/db.h b/lib/db.h
--- a/lib/db.h	2022-02-12 09:49:54.000000000 +0100
+++ b/lib/db.h	2022-07-31 12:47:40.934545586 +0200
@@ -271,16 +271,20 @@
             nullValue = 0;
          }
          else
          {
             tell(0, "Setting invalid field format for '%s'", field->getName());
          }
       }
 
+      void setValue(int64_t value) {
+          setBigintValue(value);
+      }
+
       void setBigintValue(int64_t value)
       {
          if (field->getFormat() == ffInt || field->getFormat() == ffUInt)
          {
             if (numValue != value)
                changed++;
 
             numValue = value;
@@ -650,24 +654,26 @@
       virtual cDbFieldDef* getFieldByDbName(const char* dbname) { return tableDef->getFieldByDbName(dbname); }
       virtual int fieldCount()                                  { return tableDef->fieldCount(); }
 
       void setValue(cDbFieldDef* f, const char* value,
                     int size = 0)                           { dbValues[f->getIndex()].setValue(value, size); }
       void setValue(cDbFieldDef* f, int value)              { dbValues[f->getIndex()].setValue(value); }
       void setValue(cDbFieldDef* f, long value)             { dbValues[f->getIndex()].setValue(value); }
       void setValue(cDbFieldDef* f, double value)           { dbValues[f->getIndex()].setValue(value); }
+      void setValue(cDbFieldDef* f, int64_t value)          { setBigintValue(f, value); }
       void setBigintValue(cDbFieldDef* f, int64_t value)    { dbValues[f->getIndex()].setBigintValue(value); }
       void setCharValue(cDbFieldDef* f, char value)         { dbValues[f->getIndex()].setCharValue(value); }
 
       void setValue(const char* n, const char* value,
                     int size = 0)                           { GET_FIELD(n); dbValues[f->getIndex()].setValue(value, size); }
       void setValue(const char* n, int value)               { GET_FIELD(n); dbValues[f->getIndex()].setValue(value); }
       void setValue(const char* n, long value)              { GET_FIELD(n); dbValues[f->getIndex()].setValue(value); }
       void setValue(const char* n, double value)            { GET_FIELD(n); dbValues[f->getIndex()].setValue(value); }
+      void setValue(const char* n, int64_t value)           { setBigintValue(n, value); }
       void setBigintValue(const char* n, int64_t value)     { GET_FIELD(n); dbValues[f->getIndex()].setBigintValue(value); }
       void setCharValue(const char* n, char value)          { GET_FIELD(n); dbValues[f->getIndex()].setCharValue(value); }
 
       int hasValue(cDbFieldDef* f, const char* value) const { return dbValues[f->getIndex()].hasValue(value); }
       int hasCharValue(cDbFieldDef* f, char  value)   const { return dbValues[f->getIndex()].hasCharValue(value); }
       int hasValue(cDbFieldDef* f, long value)        const { return dbValues[f->getIndex()].hasValue(value); }
       int hasValue(cDbFieldDef* f, double value)      const { return dbValues[f->getIndex()].hasValue(value); }
 
@@ -1119,23 +1125,25 @@
       void clear()                                                    { row->clear(); }
       void clearChanged()                                             { row->clearChanged(); }
       int getChanges()                                                { return row->getChanges(); }
       std::string getChangedFields()                                  { return row->getChangedFields(); }
       void setValue(cDbFieldDef* f, const char* value, int size = 0)  { row->setValue(f, value, size); }
       void setValue(cDbFieldDef* f, int value)                        { row->setValue(f, value); }
       void setValue(cDbFieldDef* f, long value)                       { row->setValue(f, value); }
       void setValue(cDbFieldDef* f, double value)                     { row->setValue(f, value); }
+      void setValue(cDbFieldDef* f, int64_t value)                    { setBigintValue(f, value); }
       void setBigintValue(cDbFieldDef* f, int64_t value)              { row->setBigintValue(f, value); }
       void setCharValue(cDbFieldDef* f, char value)                   { row->setCharValue(f, value); }
 
       void setValue(const char* n, const char* value, int size = 0)   { row->setValue(n, value, size); }
       void setValue(const char* n, int value)                         { row->setValue(n, value); }
       void setValue(const char* n, long value)                        { row->setValue(n, value); }
       void setValue(const char* n, double value)                      { row->setValue(n, value); }
+      void setValue(const char* n, int64_t value)                     { setBigintValue(n, value); }
       void setBigintValue(const char* n, int64_t value)               { row->setBigintValue(n, value); }
       void setCharValue(const char* n, char value)                    { row->setCharValue(n, value); }
 
       // void copyValues(cDbRow* r, int types = ftData);
 
       int hasValue(cDbFieldDef* f, const char* value)                 { return row->hasValue(f, value); }
       int hasCharValue(cDbFieldDef* f, char value)                    { return row->hasCharValue(f, value); }
       int hasValue(cDbFieldDef* f, long value)                        { return row->hasValue(f, value); }
diff -ru8bBw a/parameters.c b/parameters.c
--- a/parameters.c	2022-02-12 09:49:54.000000000 +0100
+++ b/parameters.c	2022-07-31 13:04:28.350662937 +0200
@@ -201,16 +201,35 @@
       value = atol(txt);
    else
       value = 0;
 
    return found;
 }
 
 //***************************************************************************
+// Get Long Integer Parameter
+//***************************************************************************
+
+int cParameters::getParameter(const char* owner, const char* name, int64_t& value)
+{
+   char txt[100]; *txt = 0;
+   int found;
+
+   found = getParameter(owner, name, txt);
+
+   if (!isEmpty(txt))
+      value = atoll(txt);
+   else
+      value = 0;
+
+   return found;
+}
+
+//***************************************************************************
 // Set String Parameter
 //***************************************************************************
 
 int cParameters::setParameter(const char* owner, const char* name, const char* value)
 {
    Parameter* definition = getDefinition(owner, name);
 
    if (!definition)
@@ -248,8 +267,17 @@
 int cParameters::setParameter(const char* owner, const char* name, long int value)
 {
    char txt[16];
 
    snprintf(txt, sizeof(txt), "%ld", value);
 
    return setParameter(owner, name, txt);
 }
+
+int cParameters::setParameter(const char* owner, const char* name, int64_t value)
+{
+    char txt[16];
+
+    snprintf(txt, sizeof(txt), "%ll", value);
+
+    return setParameter(owner, name, txt);
+}
diff -ru8bBw a/parameters.h b/parameters.h
--- a/parameters.h	2022-02-12 09:49:54.000000000 +0100
+++ b/parameters.h	2022-07-31 13:04:14.238717829 +0200
@@ -39,18 +39,20 @@
 
       cParameters();
 
       int initDb(cDbConnection* connection);
       int exitDb();
 
       int getParameter(const char* owner, const char* name, char* value = 0);
       int getParameter(const char* owner, const char* name, long int& value);
+      int getParameter(const char* owner, const char* name, int64_t& value);
       int setParameter(const char* owner, const char* name, const char* value);
       int setParameter(const char* owner, const char* name, long int value);
+      int setParameter(const char* owner, const char* name, int64_t value);
       
    protected:
 
       cDbTable* parametersDb;
       cDbStatement* selectParameters;
 
       static Parameter parameters[];
       static Parameter* getDefinition(const char* owner, const char* name);
