commit dc5168ff30fc30156d406b2293b4aae223353d6e
Author: kfb77 <kfb77>
Date:   Mon Jun 27 21:34:58 2022 +0200

    fix SVDRP POLL TIMERS: timeout while waiting for response

diff --git a/svdrp.c b/svdrp.c
index 85321771..42d1c227 100644
--- a/svdrp.c
+++ b/svdrp.c
@@ -751,7 +751,11 @@ bool cSVDRPClientHandler::GetServerNames(cStringList *ServerNames)
 
 bool cSVDRPClientHandler::TriggerFetchingTimers(const char *ServerName)
 {
-  cMutexLock MutexLock(&mutex);
+  cMutexTimedWait MutexLock(&mutex);
+  if (!MutexLock.Lock(&mutex, SVDRPResonseTimeout / 5)) {
+     dsyslog("cSVDRPClientHandler::TriggerFetchingTimers() mutex %p lock failed", &mutex);
+     return false;
+  }
   if (cSVDRPClient *Client = GetClientForServer(ServerName)) {
      Client->SetFetchFlag(sffTimers);
      return true;
diff --git a/thread.c b/thread.c
index 2d3580b7..874aaf17 100644
--- a/thread.c
+++ b/thread.c
@@ -231,6 +231,17 @@ void cMutex::Unlock(void)
      pthread_mutex_unlock(&mutex);
 }
 
+int cMutex::TimedWait(const int TimeoutMs)
+{
+  struct timespec abstime;
+  int ret = -1;
+  if (GetAbsTime(&abstime, TimeoutMs))
+     ret = pthread_mutex_timedlock(&mutex, &abstime);
+  if (ret == 0) locked++;
+  return ret;
+}
+
+
 // --- cThread ---------------------------------------------------------------
 
 tThreadId cThread::mainThreadId = 0;
@@ -408,6 +419,35 @@ bool cMutexLock::Lock(cMutex *Mutex)
   return false;
 }
 
+// --- cMutexTimedWait ------------------------------------------------------------
+
+cMutexTimedWait::cMutexTimedWait(cMutex *Mutex, const int timeout)
+{
+  mutex = NULL;
+  locked = false;
+}
+
+cMutexTimedWait::~cMutexTimedWait()
+{
+  if (mutex && locked)
+     mutex->Unlock();
+}
+
+bool cMutexTimedWait::Lock(cMutex *Mutex, const int timeout)
+{
+  if (Mutex && !mutex) {
+     mutex = Mutex;
+     int ret = Mutex->TimedWait(timeout);
+     if (ret != 0) {
+        dsyslog("cMutexTimedWait::Lock() mutex %p lock failed: %s", mutex, strerror(ret));
+        return false;
+        }
+     locked = true;
+     return true;
+     }
+  return false;
+}
+
 // --- cThreadLock -----------------------------------------------------------
 
 cThreadLock::cThreadLock(cThread *Thread)
diff --git a/thread.h b/thread.h
index 16c4bd75..ccac4e58 100644
--- a/thread.h
+++ b/thread.h
@@ -74,6 +74,7 @@ public:
   ~cMutex();
   void Lock(void);
   void Unlock(void);
+  int TimedWait(const int TimeoutMs);
   };
 
 class cThread {
@@ -148,6 +149,16 @@ public:
   bool Lock(cMutex *Mutex);
   };
 
+class cMutexTimedWait {
+private:
+  cMutex *mutex;
+  bool locked;
+public:
+  cMutexTimedWait(cMutex *Mutex = NULL, const int timeout = 0);
+  ~cMutexTimedWait();
+  bool Lock(cMutex *Mutex, const int timeout);
+  };
+
 // cThreadLock can be used to easily set a lock in a thread and make absolutely
 // sure that it will be unlocked when the block will be left. Several locks can
 // be stacked, so a function that makes many calls to another function which uses
