name: Build Artifacts

on:
  workflow_call:
    inputs:
      config:
        description: "Configuration to build"
        default: CoreELEC-22-no
        type: string

      releasetag:
        description: "Release Tag"
        required: true
        type: string

      addons:
        description: "addons"
        type: string

      extras:
        description: "extras"
        type: string

      extraparameter:
        description: "extra parameter"
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    name: ${{ inputs.config }}
    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'
          verbose: 'false'

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create dir and determine source artifact
        id: source_artifact
        run: |
          echo "==> apt Update"
          sudo apt update
          
          echo "==> deinstall packages"
          for i in apache2 apache2-bin apache2-utils \
                clang-format-13 clang-format-14 clang-format-15 clang-13 clang-14 clang-15 clang-tidy-13 clang-tidy-14 clang-tidy-15 clang-tools-13 clang-tools-14 clang-tools-15 \
                lld-13 lld-14 lld-15 llvm-13 llvm-14 llvm-15 \
                cloud-guest-utils cloud-init cloud-initramfs-copymods cloud-initramfs-dyn-netconf \
                cpp-9 cpp-10 cpp-11 g++-9 g++-10 g++-11 gcc-9 gcc-10 gcc-11 \
                gfortran gfortran-9 gfortran-10 gfortran-11 gfortran-12 \
                mercurial mercurial-common mono-gac mono-llvm-tools mono-runtime mono-runtime-common mssql-tools \
                aspnetcore-runtime-6.0 aspnetcore-runtime-8.0 aspnetcore-runtime-9.0 aspnetcore-targeting-pack-6.0 aspnetcore-targeting-pack-8.0 aspnetcore-targeting-pack-9.0 \
                docker-ce docker-ce-cli firefox azure-cli microsoft-edge-stable \
                dotnet-apphost-pack-6.0 dotnet-apphost-pack-8.0 dotnet-apphost-pack-9.0 \
                dotnet-hostfxr-6.0 dotnet-hostfxr-8.0 dotnet-hostfxr-9.0 \
                dotnet-runtime-6.0 dotnet-runtime-8.0 dotnet-runtime-9.0 \
                dotnet-runtime-deps-6.0 dotnet-runtime-deps-8.0 dotnet-runtime-deps-9.0 \
                dotnet-sdk-6.0 dotnet-sdk-8.0 dotnet-sdk-9.0 \
                dotnet-targeting-pack-6.0 dotnet-targeting-pack-8.0 dotnet-targeting-pack-9.0 \
                google-chrome-stable \
                mysql-client mysql-server \
                php8.1 powershell tcl \
                temurin-11-jdk temurin-21-jdk temurin-17-jdk temurin-8-jdk \
                postgresql-14 postgresql-client-14 r-base r-base-core r-base-dev r-recommended \
                php8* ; do
                sudo apt -y remove --purge $i
          done 
          
          echo "==> Install packages"
          sudo apt -y install gcc make git unzip wget xz-utils bc gperf zip g++ xfonts-utils xsltproc openjdk-11-jre-headless libxml-parser-perl lzop libjson-parse-perl libjson-perl \
            libparse-yapp-perl libncurses5-dev bc bzip2 diffutils gawk gcc gperf gzip file patchutils lzop make patch perl sed tar unzip wget xz-utils zip zstd \
            libncurses5-dev libc6-dev libparse-yapp-perl libxml-parser-perl qemu-user-binfmt g++ xfonts-utils xsltproc rdfind
          
          # echo "==> List packages"
          # dpkg -l
          
          echo "==> apt clean"
          sudo apt -y clean          

          echo "==> apt autoremove"
          sudo apt -y autoremove
  
          echo "==> remove dirs"
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/share/man /usr/share/doc \
                      /usr/local/aws-sam-cli /usr/local/aws-cli /usr/local/share/powershell /usr/share/maven-repo /usr/share/maven-repo \
                      /usr/share/az_11.3.1 /var/lib/gems /opt/az /usr/libexec/docker /etc/docker \
                      /usr/lib/heroku /usr/lib/llvm-14 /usr/lib/ruby /usr/local/include/node /usr/local/lib/node_modules \
                      /usr/local/.ghcup /usr/local/n /usr/local/doc /usr/local/share/vcpkg /usr/local/julia1.10.2 \
                      /usr/share/ri /var/lib/docker /var/lib/php /opt/pipx /opt/microsoft \
                      /usr/include/ruby* /usr/include/postgresql /usr/lib/jvm/java-11-openjdk-amd64/legal usr/lib/jvm/java-11-openjdk-amd64/man \
                      /usr/lib/x86_64-linux-gnu/ruby /usr/local/share/chromium /usr/local/man /usr/share/swig4.0 /usr/share/apache-maven* \
                      /usr/share/rubygems-integration /usr/share/miniconda /usr/share/swift /usr/share/alsa /usr/share/icons /var/lib/waagent \
                      /var/lib/apt/lists /root/.dotnet /root/.npm /root/.mozilla /root/.local/share/powershell /root/.gradle \
                      /root/.android
          
          echo "Clone submodules"
          git submodule update --init -- CoreELEC
          git submodule update --init -- LibreELEC.tv

          echo "Pre-Create directories"
          mkdir -p CoreELEC/sources
          mkdir -p LibreELEC.tv/sources
          
          mkdir -p CoreELEC/target
          mkdir -p LibreELEC.tv/target
          
          # get config values (hack)
          branch=$(grep "^PATCHDIR" config/distro/${{ inputs.config }} | awk -F= '{ print $2 }')
          project=$(grep "^PROJECT" config/distro/${{ inputs.config }} | awk -F= '{ print $2 }')
          device=$(grep "^DEVICE" config/distro/${{ inputs.config }} | awk -F= '{ print $2 }')
          
          echo "BRANCH=$branch" >> "$GITHUB_ENV"
          echo "PROJECT=$project" >> "$GITHUB_ENV"
          echo "DEVICE=$device" >> "$GITHUB_ENV"
          
          if [ "$branch" = "coreelec-20" ]; then
              echo "ARTIFACT=cache-coreelec-20-sources" >> "$GITHUB_ENV"
              echo "DISTRO=CoreELEC" >> "$GITHUB_ENV"
              rev=$(grep "COREELEC20=" config/versions | awk -F= '{ print $2 }')
          elif [ "$branch" = "coreelec-21" ]; then
              echo "ARTIFACT=cache-coreelec-21-sources" >> "$GITHUB_ENV"
              echo "DISTRO=CoreELEC" >> "$GITHUB_ENV"
              rev=$(grep "COREELEC21=" config/versions | awk -F= '{ print $2 }')
          elif [ "$branch" = "coreelec-22" ]; then
              echo "ARTIFACT=cache-coreelec-22-sources" >> "$GITHUB_ENV"
              echo "DISTRO=CoreELEC" >> "$GITHUB_ENV"
              rev=$(grep "COREELEC22=" config/versions | awk -F= '{ print $2 }')          
          elif [ "$branch" = "libreelec-12" ]; then
              echo "ARTIFACT=cache-libreelec-12-sources" >> "$GITHUB_ENV"
              echo "DISTRO=LibreELEC.tv" >> "$GITHUB_ENV"
              rev=$(grep "LIBREELEC12=" config/versions | awk -F= '{ print $2 }')
          elif [ "$branch" = "libreelec-13" ]; then
              echo "ARTIFACT=cache-libreelec-13-sources" >> "$GITHUB_ENV"
              echo "DISTRO=LibreELEC.tv" >> "$GITHUB_ENV"
              rev=$(grep "LIBREELEC13=" config/versions | awk -F= '{ print $2 }')          
          fi
          
          echo "REVISION=$rev" >> "$GITHUB_ENV"

      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: precache-sources.yml
          if_no_artifact_found: ignore
          check_artifacts: true
          search_artifacts: true
          name: ${{ env.ARTIFACT }}
          name_is_regexp: false
          path: ${{ env.DISTRO }}/sources

      - name: Build
        run: |
          BUILD_FAILED="false"

          if [ ! "${{ inputs.addons }}" = "" ] && [ ! "${{ inputs.addons }}" = "-" ] && [ ! "${{ inputs.addons }}" = "'-'" ]; then
             ADDONS="-addon ${{ inputs.addons }}"
          else
             ADDONS=""
          fi
          
          if [ ! "${{ inputs.extras }}" = "" ] && [ ! "${{ inputs.extras }}" = "-" ] && [ ! "${{ inputs.extras }}" = "'-'" ]; then
             EXTRAS="-extra ${{ inputs.extras }}"
          else
             EXTRAS=""
          fi

          if [ ! "${{ inputs.extraparameter }}" = "" ] && [ ! "${{ inputs.extraparameter }}" = "-" ] && [ ! "${{ inputs.extraparameter }}" = "'-'" ]; then
             EXTRA_PARAMETER="${{ inputs.extraparameter }}"
          else
             EXTRA_PARAMETER=""
          fi
          
          # build at first the whole toolchain
          #if ./build.sh -config ${{ inputs.config }} ${EXTRAS} ${ADDONS} ${EXTRA_PARAMETER} -package toolchain; then
          #    # build everything else          
              if ! ./build.sh -config ${{ inputs.config }} ${EXTRAS} ${ADDONS} ${EXTRA_PARAMETER}; then
                BUILD_FAILED="true"
              fi
          #else
          #  BUILD_FAILED="true"
          #fi

          echo "BUILD_FAILED=$BUILD_FAILED" >> "$GITHUB_ENV"

          # create summary
          function bool_emo() {
              if [ $1 = 'false' ]; then
                eval "$2=':white_check_mark:'"
              else
                eval "$2=':fire:'"
              fi;
          }
          emo=''
          
          bool_emo "$BUILD_FAILED" emo                 
          
          if [ "${{ env.DISTRO }}" == "CoreELEC" ]; then
              echo "| ${emo} | ${{ inputs.config }} | ${{ env.PROJECT }} | ${{ env.DEVICE }} | [${{ env.BRANCH }}@${{ env.REVISION }}](https://github.com/CoreELEC/CoreELEC/tree/${{ env.REVISION }}) |" > build-summary-${{ inputs.config }}
          else
              echo "| ${emo} | ${{ inputs.config }} | ${{ env.PROJECT }} | ${{ env.DEVICE }} | [${{ env.BRANCH }}@${{ env.REVISION }}](https://github.com/LibreELEC/LibreELEC.tv/tree/${{ env.REVISION }}) |" > build-summary-${{ inputs.config }}
          fi
          
          if [ "$BUILD_FAILED" == "false" ]; then          
              # rename target files
              if [ "$DISTRO" == "CoreELEC" ]; then
                  (
                    cd CoreELEC/target
              
                    echo "============================="
                    echo " TEST: List target files"
                    echo "============================="
                    ls -laR .
              
                    # release files
                    echo "=> CoreELEC release files"
                    for i in $(ls CoreELEC*{tar,img.gz,sha256}); do
                      if [ -f $i ]; then
                        NEWNAME=`echo $i | perl -pe "s/^(CoreELEC.*?)_(.*?)((_*.img.gz)|(\.tar))?(\.sha256)?$/VDR-\1-${{ inputs.releasetag }}\3\6/"`;
                        echo "mv $i $NEWNAME"
                        mv $i $NEWNAME || true;
                      fi
                    done;          
              
                    # addons
                    echo "=> CoreELEC addons"
                    if [ -d addons ]; then
                      for i in $(find addons -name "*zip"); do
                        if [ -f $i ]; then
                          NACE=(${i//\// })
                          echo "mv $i addons/CoreELEC-${NACE[1]}-${NACE[5]}"
                          mv $i addons/CoreELEC-${NACE[1]}-${NACE[5]} || true
                        fi
                      done
                    fi
                  )
              fi
    
              if [ "$DISTRO" == "LibreELEC.tv" ]; then          
                  (
                    cd LibreELEC.tv/target
              
                    # release files
                    echo "=> LibreELEC release files"
                    for i in `ls LibreELEC*{tar,img.gz,sha256}`; do
                      if [ -f $i ]; then
                        NEWNAME=`echo $i | perl -pe "s/^(LibreELEC.*?)-devel-\d+-.*?((-.*?)?(.img.gz)|(.tar))(\.sha256)?$/VDR-\1\3-${{ inputs.releasetag }}\4\5\6/"`;
                        echo "mv $i $NEWNAME"
                        mv $i $NEWNAME || true;
                      fi
                    done;
              
                    # addons
                    echo "=> LibreELEC addons"
                    if [ -d addons ]; then
                      for i in $(find addons -name "*zip"); do
                        if [ -f $i ]; then
                          NACE=(${i//\// })
                          echo "mv $i addons/LibreELEC-${NACE[1]}-${NACE[5]}"
                          mv $i addons/LibreELEC-${NACE[1]}-${NACE[5]} || true
                        fi
                      done
                    fi
                  )
              fi
          fi
                    

      - name: Save summary
        uses: actions/upload-artifact@v4
        with:
          name: "build-summary-${{ inputs.config }}"
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: ignore
          path: |
            build-summary-${{ inputs.config }}

      - name: Check build
        run: |
          if [ "${{ env.BUILD_FAILED }}" == "true" ]; then
              # abort this build
              false
          fi

      - name: Save release target files
        uses: actions/upload-artifact@v4
        with:
          name: "build-artifacts-${{ inputs.releasetag }}-${{ inputs.config }}"
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: ignore
          path: |
              CoreELEC/target/VDR*
              LibreELEC.tv/target/VDR*

      - name: Save addon target files
        uses: actions/upload-artifact@v4
        with:
          name: "build-addon-${{ inputs.config }}"
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: ignore
          path: |
            CoreELEC/target/addons/CoreELEC*zip 
            LibreELEC.tv/target/addons/LibreELEC*zip

      - name: Save cef files
        uses: actions/upload-artifact@v4
        with:
          name: "build-cef-${{ inputs.config }}"
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: ignore
          path: |
            cef/cef*.zip
