diff --git a/osd.c b/osd.c
index 47bda686..9f51bd53 100644
--- a/osd.c
+++ b/osd.c
@@ -1109,14 +1109,17 @@ cImage::cImage(void)
 cImage::cImage(const cImage &Image)
 {
   size = Image.Size();
+  factorX = Image.FactorX();
+  factorY = Image.FactorY();
   int l = size.Width() * size.Height();
   data = MALLOC(tColor, l);
   memcpy(data, Image.Data(), l * sizeof(tColor));
 }
-
-cImage::cImage(const cSize &Size, const tColor *Data)
+cImage::cImage(const cSize &Size, const tColor *Data, double FactorX, double FactorY)
 {
   size = Size;
+  factorX = FactorX;
+  factorY = FactorY;
   int l = size.Width() * size.Height();
   data = MALLOC(tColor, l);
   if (Data)
diff --git a/osd.h b/osd.h
index 77722662..dd5c2b7d 100644
--- a/osd.h
+++ b/osd.h
@@ -420,20 +420,25 @@ class cImage {
 private:
   cSize size;
   tColor *data;
+  double factorX = 1.0f;
+  double factorY = 1.0f;
 public:
   cImage(void);
   cImage(const cImage &Image);
-  cImage(const cSize &Size, const tColor *Data = NULL);
+  cImage(const cSize &Size, const tColor *Data = NULL, double FactorX = 1.0f, double FactorY = 1.0f);
        ///< Creates an image with the given Size and allocates the necessary memory
        ///< to copy the pixels pointed to by Data, which is a sequence of
        ///< (Size.Width() * Size.Height()) tColor values.
        ///< If Data is NULL, the allocated memory is not initialized.
        ///< The alpha value of the Image's pixels is taken into account, so it has to be
        ///< greater than 0 for the image to be visible.
+       ///< FactorX and FactorY can be used by the output device to scale the image
   virtual ~cImage();
   const cSize &Size(void) const { return size; }
   int Width(void) const { return size.Width(); }
   int Height(void) const { return size.Height(); }
+  double FactorX(void) const { return factorX; }
+  double FactorY(void) const { return factorY; }
   const tColor *Data(void) const { return data; }
   tColor GetPixel(const cPoint &Point) const { return data[size.Width() * Point.Y() + Point.X()]; }
        ///< Returns the pixel value at the given Point.
