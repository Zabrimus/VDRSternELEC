diff --git a/eepg.c b/eepg.c
index a78819d..7751b89 100644
--- a/eepg.c
+++ b/eepg.c
@@ -1324,12 +1324,17 @@ void cFilterEEPG::WriteToSchedule(tChannelID channelID, cSchedules* pSchedules,
   cEvent *Event = NULL;
   if (ps/*[eq]*/) {
 
-      Event = (cEvent *) ps->GetEvent (EventId); //since Nagra uses consistent EventIds, try this first
+      Event = (cEvent *) ps->GetEventById (EventId); //since Nagra uses consistent EventIds, try this first
       bool TableIdMatches = false;
       if (Event)
         TableIdMatches = (Event->TableID() == TableId);
       if (!Event || !TableIdMatches || abs(Event->StartTime() - (time_t) StartTime) > Duration * 60) //if EventId does not match, or it matched with wrong TableId, then try with StartTime
-        Event = (cEvent *) ps->GetEvent (EventId, StartTime);
+
+      if (StartTime > 0) {
+          Event = const_cast<cEvent*>(ps->GetEventByTime(StartTime));
+      } else {
+          Event = const_cast<cEvent*>(ps->GetEventById(EventId));
+      }
   }
   cEvent *newEvent = NULL;
   if (!Event) {  //event is new
@@ -3477,7 +3482,7 @@ void cFilterEEPG::ProcessPremiere(const u_char *& Data)
               }
 
               bool newEvent = false;
-              cEvent *pEvent = (cEvent *) pSchedule->GetEvent (EventId, -1);
+              cEvent *pEvent = (cEvent *) pSchedule->GetEventById (EventId);
               if (!pEvent) {
                 LogI(2, "(new)\n");
                 pEvent = new cEvent (EventId);
diff --git a/eit2.c b/eit2.c
index 9ee190d..f0ea7ce 100644
--- a/eit2.c
+++ b/eit2.c
@@ -32,7 +32,14 @@ cEvent* cEIT2::ProcessEitEvent(cSchedule* pSchedule,const SI::EIT::Event* EitEve
   //    int versionNumber = getVersionNumber();
 
   cEvent *newEvent = NULL;
-  cEvent *pEvent = (cEvent *) pSchedule->GetEvent (EitEvent->getEventId (), EitEvent->getStartTime ());
+
+  const cEvent* pEvent;
+  if (EitEvent->getStartTime() > 0) {
+      pEvent = pSchedule->GetEventByTime(EitEvent->getStartTime());
+  } else {
+      pEvent = pSchedule->GetEventById(EitEvent->getEventId());
+  }
+
   if (!pEvent) {
     if (OnlyRunningStatus)
       return NULL;
@@ -44,7 +51,7 @@ cEvent* cEIT2::ProcessEitEvent(cSchedule* pSchedule,const SI::EIT::Event* EitEve
   } else {
     //LogD(3, prep("existing event channelID: %s Title: %s TableID 0x%02X new TID 0x%02X Version %i, new version %i"), *channel->GetChannelID().ToString(), pEvent->Title(), pEvent->TableID(), Tid, pEvent->Version(), versionNumber);
     // We have found an existing event, either through its event ID or its start time.
-    pEvent->SetSeen ();
+    const_cast<cEvent*>(pEvent)->SetSeen ();
 
     // If the existing event has a zero table ID it was defined externally and shall
     // not be overwritten.
@@ -67,10 +74,10 @@ cEvent* cEIT2::ProcessEitEvent(cSchedule* pSchedule,const SI::EIT::Event* EitEve
       return NULL;
   }
   if (!ExternalData) {
-    pEvent->SetEventID (EitEvent->getEventId ()); // unfortunately some stations use different event ids for the same event in different tables :-(
-    pEvent->SetTableID (Tid);
-    pEvent->SetStartTime (EitEvent->getStartTime ());
-    pEvent->SetDuration (EitEvent->getDuration ());
+    const_cast<cEvent*>(pEvent)->SetEventID (EitEvent->getEventId ()); // unfortunately some stations use different event ids for the same event in different tables :-(
+    const_cast<cEvent*>(pEvent)->SetTableID (Tid);
+    const_cast<cEvent*>(pEvent)->SetStartTime (EitEvent->getStartTime ());
+    const_cast<cEvent*>(pEvent)->SetDuration (EitEvent->getDuration ());
   }
   if (newEvent)
     pSchedule->AddEvent (newEvent);
@@ -78,7 +85,7 @@ cEvent* cEIT2::ProcessEitEvent(cSchedule* pSchedule,const SI::EIT::Event* EitEve
     if (EitEvent->getRunningStatus () >= SI::RunningStatusNotRunning)
     {
 #if APIVERSNUM >= 20300
-        pSchedule->SetRunningStatus (pEvent, EitEvent->getRunningStatus (), channel);
+        pSchedule->SetRunningStatus (const_cast<cEvent*>(pEvent), EitEvent->getRunningStatus (), channel);
 #else
         cChannel* chan = Channels.GetByChannelID(channel->GetChannelID());
         pSchedule->SetRunningStatus (pEvent, EitEvent->getRunningStatus (), chan);
@@ -87,13 +94,13 @@ cEvent* cEIT2::ProcessEitEvent(cSchedule* pSchedule,const SI::EIT::Event* EitEve
   }
   if (OnlyRunningStatus)
     return NULL;  // do this before setting the version, so that the full update can be done later
-  pEvent->SetVersion (versionNumber);
+  const_cast<cEvent*>(pEvent)->SetVersion (versionNumber);
 
   ProcessEventDescriptors(ExternalData, channel->Source(), Tid, EitEvent,
-                          pEvent, channel->GetChannelID());
+                          const_cast<cEvent*>(pEvent), channel->GetChannelID());
 
   Modified = true;
-  return pEvent;
+  return const_cast<cEvent*>(pEvent);
 }
 
 void cEIT2::ProcessEventDescriptors(bool ExternalData, int Source, u_char Tid, 
@@ -243,7 +250,7 @@ void cEIT2::ProcessEventDescriptors(bool ExternalData, int Source, u_char Tid,
           tChannelID(Source, channel->Nid(), channel->Tid(), tsed->getReferenceServiceId()));
         if (!rSchedule)
           break;
-        rEvent = rSchedule->GetEvent(tsed->getReferenceEventId());
+        rEvent = rSchedule->GetEventById(tsed->getReferenceEventId());
         if (!rEvent)
           break;
         pEvent->SetTitle(rEvent->Title());
diff --git a/epghandler.c b/epghandler.c
index 1e2db9f..ed39df0 100644
--- a/epghandler.c
+++ b/epghandler.c
@@ -66,10 +66,15 @@ bool cEEpgHandler::HandleEitEvent(cSchedule* Schedule,
   modified = false;
   //VDR creates new event if the EitEvent StartTime is different than EEPG time so
   //the EPG event has to be deleted but the data should be kept
-  const cEvent* ev = schedule->GetEvent(EitEvent->getEventId(),EitEvent->getStartTime());
+  const cEvent* ev;
+  if (EitEvent->getStartTime() > 0) {
+      ev = schedule->GetEventByTime(EitEvent->getStartTime());
+  } else {
+      ev = schedule->GetEventById(EitEvent->getEventId());
+  }
   searchDuplicates = !ev; //if the event exist with a same start time, it is handled by SetShortText/SetDescription
   if (!ev){
-      ev = schedule->GetEvent(EitEvent->getEventId());
+      ev = schedule->GetEventById(EitEvent->getEventId());
       // remove shifted duplicates with same ID
       if (ev && ((ev->StartTime()>EitEvent->getStartTime() && ev->StartTime() < EitEvent->getStartTime()+EitEvent->getDuration())
           || (EitEvent->getStartTime() > ev->StartTime() && EitEvent->getStartTime() < ev->EndTime()))) {
diff --git a/equivhandler.c b/equivhandler.c
index 75007ec..612eff6 100644
--- a/equivhandler.c
+++ b/equivhandler.c
@@ -143,7 +143,14 @@ void cEquivHandler::updateEquivalent(cSchedules * Schedules, tChannelID channelI
     if (equChannel) {
       LogD(2, prep("found Equivalent channel %s"), *equChannelID.ToString());
       cSchedule *pSchedule = (cSchedule *) Schedules->GetSchedule (equChannel, true);
-      cEvent *pEqvEvent = (cEvent *) pSchedule->GetEvent (pEvent->EventID(), pEvent->StartTime());
+
+      const cEvent *pEqvEvent;
+      if (pEvent->StartTime() > 0) {
+          pEqvEvent = pSchedule->GetEventByTime(pEvent->StartTime());
+      } else {
+          pEqvEvent = pSchedule->GetEventById(pEvent->EventID());
+      }
+
       if (pEqvEvent) {
         LogD(3, prep("equivalent event exists"));
         if (pEqvEvent == pEvent) {
@@ -151,7 +158,7 @@ void cEquivHandler::updateEquivalent(cSchedules * Schedules, tChannelID channelI
 
         } else {
           LogD(2, prep("remove equivalent"));
-          pSchedule->DelEvent(pEqvEvent);
+          pSchedule->DelEvent(const_cast<cEvent *>(pEqvEvent));
           cEvent* newEvent = new cEvent (pEvent->EventID());
           cloneEvent(pEvent, newEvent);
 
diff --git a/util.c b/util.c
index 1109181..4f26c52 100644
--- a/util.c
+++ b/util.c
@@ -214,7 +214,13 @@ void cAddEventThread::Action(void)
       while (((*it).second->First()) != NULL) {
         cEvent* event = (*it).second->First();
 
-        cEvent *pEqvEvent = (cEvent *) schedule->GetEvent (event->EventID(), event->StartTime());
+        const cEvent *pEqvEvent;
+        if (event->StartTime() > 0) {
+            pEqvEvent = schedule->GetEventByTime(event->StartTime());
+        } else {
+            pEqvEvent = schedule->GetEventById(event->EventID());
+        }
+
         if (pEqvEvent){
           (*it).second->Del(event);
         } else {
