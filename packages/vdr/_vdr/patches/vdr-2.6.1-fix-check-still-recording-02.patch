--- ./cutter.c	2018/01/18 12:19:31	5.0
+++ ./cutter.c	2022/11/06 11:25:13
@@ -677,6 +677,7 @@
               cRecordingUserCommand::InvokeCommand(RUC_EDITINGRECORDING, editedVersionName, originalVersionName);
               if (cVideoDirectory::RemoveVideoFile(editedVersionName) && MakeDirs(editedVersionName, true)) {
                  Recording.WriteInfo(editedVersionName);
+                 SetRecordingTimerId(editedVersionName, cString::sprintf("%d@%s", 0, Setup.SVDRPHostName));
                  cuttingThread = new cCuttingThread(originalVersionName, editedVersionName);
                  return true;
                  }
@@ -693,6 +694,7 @@
   const char *Error = cuttingThread ? cuttingThread->Error() : NULL;
   delete cuttingThread;
   cuttingThread = NULL;
+  SetRecordingTimerId(editedVersionName, NULL);
   if ((Interrupted || Error) && *editedVersionName) {
      if (Interrupted)
         isyslog("editing process has been interrupted");
--- ./recording.c	2022/01/24 10:44:21	5.14
+++ ./recording.c	2022/11/06 11:26:16
@@ -66,7 +66,6 @@
 #define DISKCHECKDELTA    100 // seconds between checks for free disk space
 #define REMOVELATENCY      10 // seconds to wait until next check after removing a file
 #define MARKSUPDATEDELTA   10 // seconds between checks for updating editing marks
-#define MININDEXAGE      3600 // seconds before an index file is considered no longer to be written
 #define MAXREMOVETIME      10 // seconds after which to return from removing deleted recordings
 
 #define MAX_LINK_LEVEL  6
@@ -1351,6 +1350,11 @@
   return Use;
 }
 
+static bool StillRecording(const char *Directory)
+{
+  return access(AddDirectory(Directory, TIMERRECFILE), F_OK) == 0;
+}
+
 void cRecording::ResetResume(void) const
 {
   resume = RESUME_NOT_INITIALIZED;
@@ -1360,7 +1364,7 @@
 {
   if (numFrames < 0) {
      int nf = cIndexFile::GetLength(FileName(), IsPesRecording());
-     if (time(NULL) - LastModifiedTime(cIndexFile::IndexFileName(FileName(), IsPesRecording())) < MININDEXAGE)
+     if (StillRecording(FileName()))
         return nf; // check again later for ongoing recordings
      numFrames = nf;
      }
@@ -1379,7 +1383,7 @@
 {
   if (fileSizeMB < 0) {
      int fs = DirSizeMB(FileName());
-     if (time(NULL) - LastModifiedTime(cIndexFile::IndexFileName(FileName(), IsPesRecording())) < MININDEXAGE)
+     if (StillRecording(FileName()))
         return fs; // check again later for ongoing recordings
      fileSizeMB = fs;
      }
@@ -2610,7 +2614,7 @@
                        }
                     else if (isPesRecording)
                        ConvertFromPes(index, size);
-                    if (!index || time(NULL) - buf.st_mtime >= MININDEXAGE) {
+                    if (!index || !StillRecording(FileName)) {
                        close(f);
                        f = -1;
                        }
